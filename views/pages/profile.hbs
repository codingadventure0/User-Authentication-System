
<!-- Profile Page -->
<body class="profile-body">
  
  <!-- Display success message -->
  {{#if successMessage}}
    <div class="alert alert-success">
      <strong>Success!</strong> {{successMessage}}
    </div>
  {{/if}}

  <!-- Display error message -->
  {{#if errorMessage}}
    <div class="alert alert-danger">
      <strong>Error!</strong> {{errorMessage}}
    </div>
  {{/if}}

  <div class="profile-container">
    <!-- Left Side - User Details -->
    <div class="profile-left">
      
      <div class="user-image">
        <img src="{{user.profilePictureUrl}}" alt="User Image">
        <a href="#" class="edit-img"><i class="fas fa-pencil-alt"></i></a>
      </div>
      <!-- User Details -->
      <div class="user-details">
        <h2><strong>{{user.name}}</strong></h2>
        <p><strong>Email:</strong> {{user.email}}</p>
        <p><strong>Role:</strong> {{user.role}}</p>
        <p><strong>Gender:</strong> {{user.gender}}</p>
      </div>
      <!-- Logout and Report Bug Buttons -->
      <div class="user-buttons">
        <a href="#" class="edit-button" style="color:#fff;">Update Details</a>
        <a href="/user/bug" class="report-button">Report Bug</a>
        <a href="#" class="reset-button">Reset Password</a>
        <a href="/user/logout" class="logout-button">Logout</a>
      </div>
      <div class="delete-div">
        <h3>Delete Your Account</h3>
        <hr>
        <p>Once you delete your account, there is no going back. Please be certain.</p>
        <a href="#" class="delete-button">Delete Account</a>
      </div>
    </div>
    <!-- Right Side - Book Collection -->
    <div class="profile-right">
      <div class="second-container">
         <h1 style="text-align: center;">User Authentication System</h1>

    <h2>Overview</h2>
    <p>This project is a User Authentication System built using Express.js, Handlebars (hbs), Mongoose, bcrypt, and JSON Web Tokens (JWT). It provides features for user signup, login, profile management, password reset, account deletion, and more.</p>

    <h3>Project Structure</h3>
    <pre>
        ├───bin
        │   └───www
        ├───controllers
        │   ├───user.controller.js
        │   └───index.js
        ├───helper
        │   ├───db.helper.js
        │   ├───token.helper.js
        │   └───index.js
        ├───middlewares
        │   ├───auth.middleware.js
        │   ├───loggedIn.middleware.js
        │   └───signup.middleware.js
        ├───model
        │   ├───user.model.js
        │   └───index.js
        ├───public
        │   ├───javascripts
        │   └───stylesheets
        ├───routes
        │   └───index.js
        ├───services
        │   └───index.js
        │   └───user.service.js
        └───views
            ├───form
            ├───layouts
            ├───pages
            └───partials
            ├───index.hbs
            └───error.hbs
    </pre>

    <h3>Features</h3>
    <ul>
        <li><strong>Signup</strong>: Allows users to create a new account with email and password. Validates input fields including password complexity.</li>
        <li><strong>Login</strong>: Users can securely login using their credentials. Passwords are hashed and compared for authentication.</li>
        <li><strong>JWT Authentication</strong>: Implements JSON Web Token (JWT) based authentication for session management.</li>
        <li><strong>Profile Management</strong>: Users can view and update their profile information such as name, email, batch, etc.</li>
        <li><strong>Password Reset</strong>: Provides functionality for users to reset their password securely.</li>
        <li><strong>Account Deletion</strong>: Allows users to delete their account permanently.</li>
        <li><strong>Middleware</strong>: Utilizes middleware for authentication and authorization purposes.</li>
        <li><strong>Popup Modal</strong>: Implements AJAX requests to perform actions like updating profile and deleting account without refreshing the page.</li>
    </ul>

    <h3>Technologies Used</h3>
    <ul>
        <li><strong>Express.js</strong>: Node.js web application framework used for building the backend.</li>
        <li><strong>Handlebars (hbs)</strong>: Template engine for generating HTML markup.</li>
        <li><strong>Mongoose</strong>: Object Data Modeling (ODM) library for MongoDB and Node.js.</li>
        <li><strong>bcrypt</strong>: Password hashing library for securely storing passwords.</li>
        <li><strong>JSON Web Tokens (JWT)</strong>: Standard for securely transmitting information between parties.</li>
        <li><strong>Ajax</strong>: Asynchronous JavaScript and XML for performing asynchronous requests.</li>
    </ul>

    <h2>Setup Instructions</h2>
    <ol>
        <li>Clone the repository:</li>
        <pre><code>git clone &lt;repository-url&gt;</code></pre>
        <li>Install dependencies:</li>
        <pre><code>cd &lt;project-directory&gt;
npm install</code></pre>
        <li>Set up environment variables:</li>
        <ul>
            <li>Create a <code>.env</code> file in the project root.</li>
            <li>Add environment variables like <code>PORT</code>, <code>MONGO_URI</code>, etc.</li>
        </ul>
        <li>Start the server:</li>
        <pre><code>npm start</code></pre>
    </ol>

    <h2>Usage</h2>
    <ul>
        <li>Access the application at <code>http://localhost:3000;</code></li>
        <li>Sign up for a new account or log in if you already have one.</li>
        <li>Update your profile, reset your password, or delete your account from the profile page.</li>
    </ul>

    <h2>Credits</h2>
    <ul>
        <li>This project was created by codingadventure0 [Abhishek Kumar].</li>
        <li>Special thanks to the contributors and open-source community for their valuable contributions.</li>
    </ul>

    <h2>License</h2>
    <p>[MIT License] - [A permissive license that allows you to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software.]</p>
      </div>
    </div>
  </div>
  
</body>


<!-- Popup for updating profile Details URL -->
<div id="updateProfilePictureModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Update Your Profile</h2>
        <div id="messageContainer">Successfully</div>
        <div class="user-image popup-img">
          <img src="{{user.profilePictureUrl}}" alt="User Image">
        </div>
        <ul>
          <li><label for="profile">Image URL</label>
            <input type="text" id="profilePictureUrlInput" placeholder="Enter Image URL" value="{{user.profilePictureUrl}}">
          </li>
          <li>
            <label for="name">Your Name</label>
            <input type="text" id="nameInput" value="{{user.name}}">
          </li>
          <li>
            <label for="gender">Gender</label>
            {{!-- <input type="text" id="gender" value="{{user.gender}}">  --}}
            <select name="gender" id="gender">
              <option>{{user.gender}}</option>
              <option value="MALE">MALE</option>
              <option value="FEMALE">FEMALE</option>
              <option value="OTHER">OTHER</option>
            </select>  
          </li>
        </ul>
        <div class="flex-prop">
            <button id="updateProfileDetailsBtn" class="save-btn">Save</button>
        </div> <!-- Add id to the save button -->
    </div>
</div>


<!-- Popup for resetting password -->
<div id="resetPasswordModal" class="modal">
    <div class="modal-content">
        <div id="resetmsg">Successfully</div>
        <span class="close">&times;</span>
        <h2>Reset Password</h2>
        <ul>
          <li>
            <label for="oldPassword">Old Password</label>
            <input type="password" id="oldPassword" placeholder="Old Password" required>
            <span id="passwordError2" style="color: red; display: none; margin-bottom: 10px;">Old Password incorrect.</span>
          </li>
          <li>
            <label for="newPassword">New Password</label>
            <input type="password" id="newPassword" placeholder="New Password" required>
            <i class="fa-regular fa-eye-slash eye-icon2"  id="resetEyeIcon" onclick="togglePasswordVisibility()"></i> 
            <div id="pwdSugest"></div>
          </li>
          <li>
            <label for="confirmPassword">Confirm Password</label>
            <input type="password" id="confirmPassword" placeholder="Confirm Password" required>
            <span id="passwordError" style="color: red; display: none; margin-bottom: 50px;">Passwords don't match</span>
          </li>
        </ul>
        <div class="flex-prop">
          <button id="resetPasswordBtn" class="save-btn">Reset Password</button>
        </div>
    </div>
</div>


{{!-- User Destroy popup --}}
<div id="deleteConfirmationModal" class="modal">
    <div class="modal-content">
        <div id="deletemsg">Successfully</div>
        <span class="close">&times;</span>
        <h2>Are you sure you want to do this?</h2>
        <ul>
          <li>
            <label for="email">Your email:</label>
            <input type="email" id="deleteEmail" autocomplete="off" required>
          </li>
          <li>
            <label for="deleteConfirmationInput"><strong>To verify, type</strong> <i style="font-weight: 300;user-select: none;">"delete my account"</i> <strong>below:</strong></label>
            <input type="text" id="deleteConfirmationInput" autocomplete="off" required>
          </li>
          <li>
            <label for="deletePassword">Confirm your password:</label>
            <input type="password" id="deletePassword" required>
          </li>
        </ul>
        <div class="flex-prop">
          <button id="confirmDeleteBtn" class="delete-button">Delete Account</button>
        </div>
    </div>
</div>


<script>
    // Get the modal
    var modal = document.getElementById("updateProfilePictureModal");

    // Get the button that opens the modal
    var editImgBtn = document.querySelector(".edit-img");
    var editDetails = document.querySelector(".edit-button")

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];

    // When the user clicks the pencil icon, open the modal
    editImgBtn.onclick = function() {
      modal.style.top = "0"; 
      modal.style.left = "0"; 
      modal.style.display = "block";
    }

    // When the user clicks the Update details, open the modal
    editDetails.onclick = function() {
      modal.style.top = "0"; 
      modal.style.left = "0";
      modal.style.display = "block";
    }

    // When the user clicks on <span> (x), close the modal
      span.onclick = function() {
      modal.style.display = "none";
    }


    // Handle saving the new profile details
    var updateProfileDetailsBtn = document.getElementById("updateProfileDetailsBtn");
    updateProfileDetailsBtn.onclick = function() {
    var newProfilePictureUrl = document.getElementById("profilePictureUrlInput").value;
    var newName = document.getElementById("nameInput").value;
    var newGender = document.getElementById("gender").value; // Get selected gender
    var messageContainer = document.getElementById("messageContainer");
    fetch('/user/updateProfilePictureUrl', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
            newProfilePictureUrl: newProfilePictureUrl,
            newName: newName,
            newGender: newGender 
        })
    }).then(response => {
    if (response.ok) {
        // Display success message
        var messageContainer = document.getElementById("messageContainer");
        messageContainer.innerText = "Account Updated Successfully"
        messageContainer.style.display = "block";

        // Hide the message after 2 seconds
        setTimeout(function() {
            messageContainer.style.display = "none";
            // Redirect to profile page after hiding the message
            window.location.href = '/user/profile';
        }, 1500);
    } else {
        // Handle error if necessary
        alert('Error updating account');
    }
  });

};


    // Get the modal for resetting password
var resetPasswordModal = document.getElementById("resetPasswordModal");

// Get the button that opens the modal
var resetPasswordBtn = document.querySelector(".reset-button");

// When the user clicks the Reset Password button, open the modal
resetPasswordBtn.onclick = function() {
    resetPasswordModal.style.display = "block";
};


// Get the span element that closes the reset password modal
var resetPasswordCloseBtn = document.getElementById("resetPasswordModal").getElementsByClassName("close")[0];

// Function to reset input fields
function resetInputFields() {
    document.getElementById("oldPassword").value = "";
    document.getElementById("newPassword").value = "";
    document.getElementById("confirmPassword").value = "";
    document.getElementById("pwdSugest").textContent = "";
    document.getElementById("passwordError").style.display = "none";
    document.getElementById("passwordError2").style.display = "none";
}

// When the user clicks on <span> (x), close the reset password modal
resetPasswordCloseBtn.onclick = function() {
    resetPasswordModal.style.display = "none";
    resetInputFields();
};


window.onclick = function(event) {
    if (event.target == resetPasswordModal) {
        resetPasswordModal.style.display = "none";
        resetInputFields();
    }else if (event.target == modal) {
        modal.style.display = "none";
      }
};

// Handle resetting the password
var resetPasswordBtn = document.getElementById("resetPasswordBtn");
var resetmsg = document.getElementById("resetmsg");

function resetPwd(oldPassword) {
    var newPassword = document.getElementById("newPassword").value;
    var confirmPassword = document.getElementById("confirmPassword").value;
    var resetmsg = document.getElementById("resetmsg");
    var resetPasswordModal = document.getElementById("resetPasswordModal");

    // Check if new password matches confirm password
    var isValid = validateForm();
    if (!isValid) {
        return; // Prevent form submission
    }

    // Send AJAX request to server to reset password
    fetch('/user/resetPassword', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
            oldPassword: oldPassword,
            newPassword: newPassword,
            confirmPassword: confirmPassword
        })
    })
    .then(response => {
        if (response.ok) {
            // Password updated successfully
            resetmsg.innerText = "Password Updated Successfully";
            resetmsg.style.display = "block";
            resetmsg.style.color = "#1f883d";
            setTimeout(function() {
                resetPasswordModal.style.display = "none";
                resetmsg.style.display = "none";
                resetInputFields(); // Reset input fields when the modal is closed
            }, 2000);
        } else {
            // Error in updating password
            alert('Error in updating password.');
        }
    })
    .catch(error => {
        console.error('Error resetting password:', error);
        // Handle error here (e.g., display an error message)
        alert('Error resetting password. Please try again later.');
    });
}

resetPasswordBtn.onclick = function() {
    var oldPassword = document.getElementById("oldPassword").value;
    var newPassword = document.getElementById("newPassword").value;
    var confirmPassword = document.getElementById("confirmPassword").value;
    var resetmsg = document.getElementById("resetmsg");
    var resetPasswordModal = document.getElementById("resetPasswordModal");

    // Validate form fields
    if (!oldPassword || !newPassword || !confirmPassword) {
        resetmsg.innerText = "Please fill all fields.";
        resetmsg.style.display = "block";
        resetmsg.style.color = "#d1242f";

        setTimeout(function() {
            resetmsg.style.display = "none";
        }, 1500);

        return; // Prevent form submission
    }

    // Send AJAX request to server to check old password
    fetch('/user/checkPwd', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ oldPassword: oldPassword })
    })
    .then(response => {
        if (response.ok) {
            resetPwd(oldPassword); // Call resetPwd only if old password is correct
        } else {
            document.getElementById("passwordError2").textContent = "Old password incorrect.";
            document.getElementById("passwordError2").style.display = "block";
            setTimeout(function() {
                document.getElementById("passwordError2").style.display = "none";
            }, 2500);
        }
    })
    .catch(error => {
        console.error('Error checking old password:', error);
        alert('Error checking old password. Please try again later.');
    });
};




//Password confirmation for reset password
document.getElementById("newPassword").addEventListener("input", function () {
  var password = this.value;

  // Check password complexity and update suggestion message
  var regex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9]).{8,}$/;
  var suggestionMessage = "Password should contain at least one uppercase letter, one special symbol, and one number.";
  if (regex.test(password)) {
      suggestionMessage = ""; // Clear suggestion message if password meets complexity requirements
  }

  document.getElementById("pwdSugest").textContent = suggestionMessage;
});

function validateForm() {
  var password = document.getElementById("newPassword").value;
  var confirmPassword = document.getElementById("confirmPassword").value;

  // Check if passwords match
  if (password !== confirmPassword) {
      document.getElementById("passwordError").textContent = "Passwords don't match";
      document.getElementById("passwordError").style.display = "block";
      return false; // Prevent form submission
  }

  // Check password complexity
  var regex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[0-9]).{8,}$/;
  if (!regex.test(password)) {
      document.getElementById("passwordError").textContent = "Password must contain at least one uppercase letter, one special symbol, and one number";
      document.getElementById("passwordError").style.display = "block";
      return false; // Prevent form submission
  }

  return true; // Allow form submission
}

function togglePasswordVisibility() {
  var pwdInput = document.getElementById("newPassword");
  var resetEyeIcon = document.getElementById("resetEyeIcon");

  
  if (pwdInput.type === "password") {
    pwdInput.type = "text";
    resetEyeIcon.classList.remove("fa-eye-slash");
    resetEyeIcon.title = "Hide password"; 
    resetEyeIcon.classList.add("fa-eye");
  } else {
    pwdInput.type = "password";
    resetEyeIcon.classList.remove("fa-eye");
    resetEyeIcon.title = "Show password";
    resetEyeIcon.classList.add("fa-eye-slash");
  }

}

//{{!-- Destroy route code  --}}
// Get the modal for delete confirmation
var deleteConfirmationModal = document.getElementById("deleteConfirmationModal");

// Get the button that opens the delete confirmation modal
var deleteButton = document.querySelector(".delete-button");

// When the user clicks the Delete Account button, open the delete confirmation modal
deleteButton.onclick = function() {
    deleteConfirmationModal.style.display = "block";
};

// Get the span element that closes the delete confirmation modal
var deleteConfirmationCloseBtn = deleteConfirmationModal.querySelector(".close");

// When the user clicks on <span> (x), close the delete confirmation modal
deleteConfirmationCloseBtn.onclick = function() {
    deleteConfirmationModal.style.display = "none";
};

// Get the confirm delete button
var confirmDeleteBtn = document.getElementById("confirmDeleteBtn");
var deletemsg = document.getElementById("deletemsg");
// When the user clicks the Confirm Delete button
confirmDeleteBtn.onclick = function() {
    var deleteEmail = document.getElementById("deleteEmail").value;
    var deletePassword = document.getElementById("deletePassword").value;
    var deleteConfirmationInput = document.getElementById("deleteConfirmationInput").value;

    // Validate input fields
    if (deleteConfirmationInput.trim() !== "delete my account") {
        alert("Please type the confirmation message correctly.");
        return;
    }

    // Send AJAX request to server to delete the account
    fetch('/user/destroy', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
            email: deleteEmail,
            password: deletePassword
        })
    }).then(response => {
        if (response.ok) {
          // Display success message
          var deletemsg = document.getElementById("deletemsg");
          deletemsg.innerText = "Account Deleted Successfully"
          deletemsg.style.display = "block";

          // Hide the message after 2 seconds
          setTimeout(function() {
              deletemsg.style.display = "none";
              window.location.href = '/user/login';
          }, 1500);
      } else {
          alert('Error deleting updating account');
      }
  });
};
</script>

